vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
set.seed( 100007)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 415
for( i in 1:10000 )  #diez mil experimentos
require("data.table")
set.seed( 100007)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 415
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
set.seed( 100009) # c(100003, 100005, 100007, 100009, 100011)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 415
for( i in 1:10000 )  #diez mil experimentos
require("data.table")
set.seed( 100009) # c(100003, 100005, 100007, 100009, 100011)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 415
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
set.seed( 100011) # c(100003, 100005, 100007, 100009, 100011)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 415
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
set.seed( 100011) # c(100003, 100005, 100007, 100009, 100011)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 600
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
set.seed( 100009) # c(100003, 100005, 100007, 100009, 100011)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 600
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
set.seed( 100007) # c(100003, 100005, 100007, 100009, 100011)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 600
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
set.seed( 100005) # c(100003, 100005, 100007, 100009, 100011)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 600
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
set.seed( 100003) # c(100003, 100005, 100007, 100009, 100011)
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 600
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat( tiros_libres, primero_ganador/10000, "\n" )
require("data.table")
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 600
semillas =  c(100003, 100005, 100007, 100009, 100011)
for (indice in 1:1) {
set.seed( semillas[indice] )
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat("Para la semilla: ",semillas[indice])
cat("\n Tiros libres: ", tiros_libres, primero_ganador/10000, "\n" )
}
require("data.table")
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton, mejor ) #intencionalmente el mejor esta al final
#veo que tiene el vector
jugadores
#hago que los 100 jugadores tiren 10 veces cada uno
mapply(  ftirar, jugadores, 10 )
primero_ganador  <- 0
tiros_libres = 600
semillas =  c(100003, 100005, 100007, 100009, 100011)
for (indice in 1:5) {
set.seed( semillas[indice] )
for( i in 1:10000 )  #diez mil experimentos
{
vaciertos  <- mapply( ftirar, jugadores, tiros_libres )
mejor  <- which.max( vaciertos )
if( mejor == 100 )  primero_ganador  <- primero_ganador + 1
}
cat("Para la semilla: ",semillas[indice])
cat("\n Tiros libres: ", tiros_libres, primero_ganador/10000, "\n" )
}
length(semillas)
semillas =  c(100003, 100005, 100007, 100009, 100011, 200029)
length(semillas)
source("C:/Users/corin/Downloads/cazatalentos.R")
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("rpart")
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
hs  <- makeParamSet(
makeNumericParam("cp"       , lower= -1   , upper=    0.1),
makeIntegerParam("minsplit" , lower=  1L  , upper= 8000L),  #la letra L al final significa ENTERO
makeIntegerParam("minbucket", lower=  1L  , upper= 2000L),
makeIntegerParam("maxdepth" , lower=  3L  , upper=   20L),
forbidden = quote( minbucket > 0.5*minsplit ) )             # minbuket NO PUEDE ser mayor que la mitad de minsplit
ksemilla_azar  <- 100003   #cambiar por la primer semilla
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0( folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
ArbolSimple  <- function( fold_test, data, param )
{
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= data[ fold != fold_test, ],  #entreno en todo MENOS el fold_test que uso para testing
xval= 0,
control= param )
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,
data[ fold==fold_test, ],  #aplico el modelo sobre los datos de testing
type= "prob")   #quiero que me devuelva probabilidades
prob_baja2  <- prediccion[, "BAJA+2"]  #esta es la probabilidad de baja
#calculo la ganancia
ganancia_testing  <- data[ fold==fold_test ][ prob_baja2 > 1/60,
sum( ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) )]
return( ganancia_testing )  #esta es la ganancia sobre el fold de testing, NO esta normalizada
}
ArbolesCrossValidation  <- function( data, param, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )  # generalmente  c(1, 1, 1, 1, 1 )  cinco unos
particionar( data, divi, seed=semilla, agrupa=pagrupa )  #particiono en dataset en folds
ganancias  <- mcmapply( ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #se puede subir a qfolds si posee Linux o Mac OS
data[ , fold := NULL ]
#devuelvo la primer ganancia y el promedio
ganancia_promedio  <- mean( unlist( ganancias ) )   #promedio las ganancias
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds  #aqui normalizo la ganancia
return( ganancia_promedio_normalizada )
}
EstimarGanancia  <- function( x )
{
GLOBAL_iteracion  <<-  GLOBAL_iteracion + 1
xval_folds  <- 5
ganancia  <- ArbolesCrossValidation( dataset,
param= x, #los hiperparametros del arbol
qfolds= xval_folds,  #la cantidad de folds
pagrupa= "clase_ternaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx,  arch= archivo_log )
return( ganancia )
}
#cargo el dataset
dataset  <- fread("./datasets/paquete_premium_202011.csv")   #donde entreno
setwd("C:\\Users\\corin\\EMMD\\APLI_MD_A_ECO_Y_FINANZAS\\lab_impl\\labo\\exp\\HT3210\\")   #Establezco el Working Directory DEL EXPERIMENTO
#cargo el dataset
dataset  <- fread("./datasets/paquete_premium_202011.csv")   #donde entreno
#cargo el dataset
dataset  <- fread("C:\\Users\\corin\\EMMD\\APLI_MD_A_ECO_Y_FINANZAS\\lab_impl\\datasets/paquete_premium_202011.csv")   #donde entreno
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/HT3210/", showWarnings = FALSE )
setwd("C:\\Users\\corin\\EMMD\\APLI_MD_A_ECO_Y_FINANZAS\\lab_impl\\labo\\exp\\HT3210\\")   #Establezco el Working Directory DEL EXPERIMENTO
archivo_log  <- "HT321.txt"
archivo_BO   <- "HT321.RDATA"
#leo si ya existe el log, para retomar en caso que se se corte el programa
GLOBAL_iteracion  <- 0
if( file.exists(archivo_log) )
{
tabla_log  <- fread( archivo_log )
GLOBAL_iteracion  <- nrow( tabla_log )
}
funcion_optimizar  <- EstimarGanancia
configureMlr( show.learner.output= FALSE)
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar,
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,
has.simple.signature = FALSE
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= archivo_BO)
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())
surr.km  <- makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if( !file.exists( archivo_BO ) ) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( archivo_BO )   #retomo en caso que ya exista
#inicio la optimizacion bayesiana
if( !file.exists( archivo_BO ) ) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( archivo_BO )   #retomo en caso que ya exista
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("rpart")
require("parallel")
ksemilla_azar  <- 100003   #cambiar por la primer semilla
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0( folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
ArbolSimple  <- function( fold_test, data, param )
{
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= data[ fold != fold_test, ],  #entreno en todo MENOS el fold_test que uso para testing
xval= 0,
control= param )
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,
data[ fold==fold_test, ],  #aplico el modelo sobre los datos de testing
type= "prob")   #quiero que me devuelva probabilidades
prob_baja2  <- prediccion[, "BAJA+2"]  #esta es la probabilidad de baja
#calculo la ganancia
ganancia_testing  <- data[ fold==fold_test ][ prob_baja2 > 1/60,
sum( ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) )]
return( ganancia_testing )  #esta es la ganancia sobre el fold de testing, NO esta normalizada
}
ArbolesCrossValidation  <- function( data, param, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )  # generalmente  c(1, 1, 1, 1, 1 )  cinco unos
particionar( data, divi, seed=semilla, agrupa=pagrupa )  #particiono en dataset en folds
ganancias  <- mcmapply( ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #se puede subir a qfolds si posee Linux o Mac OS
data[ , fold := NULL ]
#devuelvo la primer ganancia y el promedio
ganancia_promedio  <- mean( unlist( ganancias ) )   #promedio las ganancias
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds  #aqui normalizo la ganancia
return( ganancia_promedio_normalizada )
}
EstimarGanancia  <- function( x )
{
GLOBAL_iteracion  <<-  GLOBAL_iteracion + 1
xval_folds  <- 5
ganancia  <- ArbolesCrossValidation( dataset,
param= x, #los hiperparametros del arbol
qfolds= xval_folds,  #la cantidad de folds
pagrupa= "clase_ternaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx,  arch= archivo_log )
return( ganancia )
}
#cargo el dataset
dataset  <- fread("C:\\Users\\corin\\EMMD\\APLI_MD_A_ECO_Y_FINANZAS\\lab_impl\\datasets/paquete_premium_202011.csv")   #donde entreno
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/HT3220/", showWarnings = FALSE )
setwd("C:\\Users\\corin\\EMMD\\APLI_MD_A_ECO_Y_FINANZAS\\lab_impl\\labo\\exp\\HT3320\\")   #Establezco el Working Directory DEL EXPERIMENTO
